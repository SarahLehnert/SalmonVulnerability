library(conformal)
library(extendedForest)
library(gradientForest)
library(dplyr)
library(data.table)
library(ggplot2)

setwd("~/Desktop/Sarah/Salmon/GenomicVulnerability/")

###########################################GENOMIC VULNERABILITY########################################################################
##dataset with population name, bioclim variables, and minor allele frequencies for SNPs of interest
##I retrieved minor allele frequencies from plink
#Script sent from Kara Layton and modified by me
#Original script comes from Fitzpatrick et al. 2015 in Ecology Letters

#environmental data
all_data_freq <- data.table::fread("OutliersRDA_AlleleFrequencies.txt", header=T)
envGF_all <- data.table::fread("Enviro/AlleleFreq_plusUncorrelated_EnviroData_below040.txt", header=T)[,1:7]

#Check that both data frame have same pops in same order
identical(all_data_freq$CLST, envGF_all$V1)
check<- as.data.frame(cbind(all_data_freq$CLST, envGF_all$V1))
check

#SNP data - only outliers from RDA in region of inversion
snpGF_all <- all_data_freq[,-1]

#current uncorrelated climate variables
current_uncor_data <- as.data.frame(envGF_all) ##run this analysis with uncorrelated variables only - don't scale

#four sets of future climate variables
rcp26_uncor <- read.table("FutureEnviro/RCP26_future_selectEnviro.txt", header=T) #exclude first column, pop name below
rcp45_uncor <-  read.table("FutureEnviro/RCP45_future_selectEnviro.txt", header=T)
rcp60_uncor <-  read.table("FutureEnviro/RCP60_future_selectEnviro.txt", header=T)
rcp85_uncor <- read.table("FutureEnviro/RCP85_future_selectEnviro.txt", header=T)

#Data for model - remove pop column
current_uncor <- as.data.frame(current_uncor_data[,2:7])

rcp26_uncor  <- as.data.frame(rcp26_uncor)

rcp45_uncor <- as.data.frame(rcp45_uncor)

rcp60_uncor <- as.data.frame(rcp60_uncor)

rcp85_uncor <- as.data.frame(rcp85_uncor)


#run your gradient forest model with current environmental variables and SNP data
maxLevel <- log2(0.368*nrow(current_uncor)/2)  #account for correlations, see ?gradientForest 

#Run graident forest model with current enviro data and allele freq
gf_uncorr <- gradientForest(cbind(current_uncor, snpGF_all), predictor.vars=colnames(current_uncor),
                            response.vars=colnames(snpGF_all), ntree=500, 
                            maxLevel=maxLevel, trace=T, corr.threshold=0.50)

#Number of snps with + Rsquare
gf_uncorr$species.pos.rsq
#Check importance of variables
plot(gf_uncorr)

#transform CURRENT variables using gf model
pred <- predict(gf_uncorr, current_uncor)

#transform FUTURE RCP 2.6 VARIABLES using gf model
proj_rcp26 <- predict(gf_uncorr, rcp26_uncor[,2:7])

#Do for other scenarios too
proj_rcp45 <- predict(gf_uncorr, rcp45_uncor[,2:7])
proj_rcp60 <- predict(gf_uncorr, rcp60_uncor[,2:7])
proj_rcp85 <- predict(gf_uncorr, rcp85_uncor[,2:7])


#GENETIC OFFSET
#I have 6 uncorrelated enviro variables here, you can add to this if you have more
#replace rcp26 with rcp45, rcp60, rcp85 to get values of genetic offset under different climate scenarios
genOffset_rcp26 <- sqrt(((proj_rcp26[,1]-pred[,1])^2)+
                          ((proj_rcp26[,2]-pred[,2])^2)+
                          ((proj_rcp26[,3]-pred[,3])^2)+
                          ((proj_rcp26[,4]-pred[,4])^2)+
                          ((proj_rcp26[,5]-pred[,5])^2)+
                          ((proj_rcp26[,6]-pred[,6])^2)
)
#create dataframe with pop names and genetic offset values and save
genOffset_rcp26_results <- as.data.frame(cbind(as.character(pops),genOffset_rcp26))
colnames(genOffset_rcp26_results)=c("Pops", "Genoffset_RCP26")
genOffset_rcp26_results[order(genOffset_rcp26_results$Genoffset_RCP26, decreasing = T),]
write.table(genOffset_rcp26_results, "GradientForest/GeneticOffset_RCP26_6enviro.txt", quote=F, row.names = F, col.names = T, sep="\t")


#GENETIC OFFSET rcp45

genOffset_rcp45 <- sqrt(((proj_rcp45[,1]-pred[,1])^2)+
                          ((proj_rcp45[,2]-pred[,2])^2)+
                          ((proj_rcp45[,3]-pred[,3])^2)+
                          ((proj_rcp45[,4]-pred[,4])^2)+
                          ((proj_rcp45[,5]-pred[,5])^2)+
                          ((proj_rcp45[,6]-pred[,6])^2)
)
#create dataframe with pop names and genetic offset values and save
genOffset_rcp45_results <- as.data.frame(cbind(as.character(pops),genOffset_rcp45))
colnames(genOffset_rcp45_results)=c("Pops", "Genoffset_RCP45")
genOffset_rcp45_results[order(genOffset_rcp45_results$Genoffset_RCP45, decreasing = T),]
write.table(genOffset_rcp45_results, "GradientForest/GeneticOffset_RCP45_6enviro.txt", quote=F, row.names = F, col.names = T, sep="\t")


#GENETIC OFFSET rcp60

genOffset_rcp60 <- sqrt(((proj_rcp60[,1]-pred[,1])^2)+
                          ((proj_rcp60[,2]-pred[,2])^2)+
                          ((proj_rcp60[,3]-pred[,3])^2)+
                          ((proj_rcp60[,4]-pred[,4])^2)+
                          ((proj_rcp60[,5]-pred[,5])^2)+
                          ((proj_rcp60[,6]-pred[,6])^2)
)
#create dataframe with pop names and genetic offset values and save
genOffset_rcp60_results <- as.data.frame(cbind(as.character(pops),genOffset_rcp60))
colnames(genOffset_rcp60_results)=c("Pops", "Genoffset_RCP60")
genOffset_rcp60_results[order(genOffset_rcp60_results$Genoffset_RCP60, decreasing = T),]
write.table(genOffset_rcp60_results, "GradientForest/GeneticOffset_RCP60_6enviro.txt", quote=F, row.names = F, col.names = T, sep="\t")


#GENETIC OFFSET rcp85

genOffset_rcp85 <- sqrt(((proj_rcp85[,1]-pred[,1])^2)+
                          ((proj_rcp85[,2]-pred[,2])^2)+
                          ((proj_rcp85[,3]-pred[,3])^2)+
                          ((proj_rcp85[,4]-pred[,4])^2)+
                          ((proj_rcp85[,5]-pred[,5])^2)+
                          ((proj_rcp85[,6]-pred[,6])^2)
)
#create dataframe with pop names and genetic offset values and save
genOffset_rcp85_results <- as.data.frame(cbind(as.character(pops),genOffset_rcp85))
colnames(genOffset_rcp85_results)=c("Pops", "Genoffset_RCP85")
genOffset_rcp85_results[order(genOffset_rcp85_results$Genoffset_RCP85, decreasing = T),]
write.table(genOffset_rcp85_results, "GradientForest/GeneticOffset_RCP85_6enviro.txt", quote=F, row.names = F, col.names = T, sep="\t")



##################################################################################
##extra script to do a quick plot of genetic offset distribution:

#read in site coordinates
northam=read.csv("SiteInfo/All_siteLocations_NorthAmerican_UPDATED.csv", header=T)
all_offsets=cbind(genOffset_rcp26_results ,genOffset_rcp45_results, genOffset_rcp60_results, genOffset_rcp85_results )
combined_results=merge(northam, all_offsets, by=1 )

#ensure values are numeric
combined_results$Genoffset_RCP26=as.numeric(as.character(combined_results$Genoffset_RCP26))
combined_results$Genoffset_RCP45=as.numeric(as.character(combined_results$Genoffset_RCP45))
combined_results$Genoffset_RCP60=as.numeric(as.character(combined_results$Genoffset_RCP60))
combined_results$Genoffset_RCP85=as.numeric(as.character(combined_results$Genoffset_RCP85))


#Quick plots showing site and their offset value by colour and size -- will do nice map with results
ggplot()+geom_point(data=combined_results, aes(x=Long, y=Lat, col=Genoffset_RCP26, size =Genoffset_RCP26))+
  scale_color_gradientn(colours = c("blue", "yellow"))

ggplot()+geom_point(data=combined_results, aes(x=Long, y=Lat, col=Genoffset_RCP85,size =Genoffset_RCP85))+
  scale_color_gradientn(colours = c("blue", "yellow"))

