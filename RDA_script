#Script for RDA to identify potential environmental outliers in salmon pops
#Script modified from Brenna Forester's vignette: https://popgen.nescent.org/2018-03-27_RDA_GEA.html
library(vegan)
library(data.table)
library(RColorBrewer)
library(qqman)

setwd("~/Desktop/Sarah/Salmon/GenomicVulnerability/")

#Read in allele frequencies merged with environmental data (only kept uncorrelated environmental variables)
new_enviro=fread("Enviro/AlleleFreq_plusUncorrelated_EnviroData_below040.txt", header=T)
new_enviro[1:10, 1:10]
new_enviro=as.data.frame(new_enviro)

#Revise columns names as needed
colnames(new_enviro)<-c("Code", "bio2", "bio8", "bio10",
                              "bio11", "bio13", "bio15",
                              colnames(new_enviro[,8:ncol(new_enviro)]))
colnames(new_enviro[,1:7])

#Add pop names as row names
rownames(new_enviro)=new_enviro$Code

#Create environmental only dataframe 
bioclim=new_enviro[,2:7]

#Create allele frequency dataframe 
freq=new_enviro[,c(8:ncol(new_enviro))]

#Check NAs (should be none for frequencies)
sum(is.na(freq))

#Run RDA with allele frequencies as response and bioclim/enviro data as predictors
#Can take a while depending on computer
salmon.rda=rda(freq~ ., data=bioclim)

#Save R data -- remove from code so do not overwrite later
#save.image("RDA/SalmonRDA_results.RData")

#Load later
#load("SalmonRDA_results.RData")

#Quick plotting of RDA results
plot(salmon.rda, scaling=3)          # default is axes 1 and 2
plot(salmon.rda, choices = c(1, 3), scaling=3)  # axes 1 and 3


#Create region for colours in plot
pop_info<- read.csv("SiteInfo/All_siteLocations_NorthAmerican_UPDATED.csv")

#Note that original dataframe is in alphabetical order
#Merge data in order to get "region" for colours in plot -- optional
new_enviro_data_pops <- cbind(new_enviro[,1], "order"=c(1:nrow(new_enviro)))
pop_info_ordered <- merge(pop_info,new_enviro_data_pops, by=1)
pop_info_ordered$order <- as.numeric(as.character(pop_info_ordered$order))
pop_info_ordered_final <- pop_info_ordered[order(pop_info_ordered$order),]

table(pop_info_ordered_final$Region)

#Plotting RDA results (similar to Brenna Forrester script)
levels(pop_info_ordered_final$Region) <- c("LAB", "Maine", "NB", "NL", "NS", "PEI", "QC")
eco <- as.factor(pop_info_ordered_final$Region)
bg <- c("#ff7f00","#1f78b4","#ffff33","darkorchid1","#33a02c","#e31a1c", "black") # 7 nice colors for our regions
bg[eco]

# axes 1 & 2
plot(salmon.rda, type="n", scaling=3)
points(salmon.rda, display="species", pch=20, cex=0.7, col="gray32", scaling=3)           # the SNPs
points(salmon.rda, display="sites", pch=21, cex=1.3, col="gray32", scaling=3, bg=bg[eco]) # the salmo pops
text(salmon.rda, scaling=3, display="bp", col="firebrick1", cex=1)                           # the predictors
legend("bottomright", legend=levels(eco), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)

#Axes 1 and 3
plot(salmon.rda, type="n", scaling=3,  choices = c(1, 3))
points(salmon.rda, display="species", pch=20, cex=0.7, col="gray32", scaling=3, choices = c(1, 3))           # the SNPs
points(salmon.rda, display="sites", pch=21, cex=1.3, col="gray32", scaling=3, bg=bg[eco], choices = c(1, 3)) # the salmo pops
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1, choices = c(1, 3))                           # the predictors
legend("bottomright", legend=levels(eco), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)


#Get outliers -- may want to use 2-3 RDA axes -- depending on how environmental variables are loading...
load.rda <- scores(salmon.rda, choices=c(1:3), display="species")  # SNP scores for the first three constrained axes
hist(load.rda[,1], main="Loadings on RDA1")
hist(load.rda[,2], main="Loadings on RDA2")
hist(load.rda[,3], main="Loadings on RDA3") 

#Outlier function to find SNPs n standard deviations from the mean
outliers <- function(x,z){
  lims <- mean(x) + c(-1, 1) * z * sd(x)     # find loadings +/-z sd from mean loading     
  x[x < lims[1] | x > lims[2]]               # locus names in these tails
}

#outlier loci 3 sd from mean on RDA1
cand1 <- outliers(load.rda[,1],3) # 920 outliers
str(cand1)

#outlier loci 3 sd from mean on RDA2
cand2 <- outliers(load.rda[,2],3) # 801 outliers
str(cand2)

#outlier loci 3 sd from mean on RDA3
cand3 <- outliers(load.rda[,3],3) # 960 outliers
str(cand3)

#Get all candidate snps
ncand <- length(cand1) + length(cand2) + length(cand3)
ncand

#Next, we’ll organize our results by making one data frame with the axis, SNP name, loading, & correlation with each predictor:
cand1 <- cbind.data.frame(rep(1,times=length(cand1)), names(cand1), unname(cand1))
cand2 <- cbind.data.frame(rep(2,times=length(cand2)), names(cand2), unname(cand2))
cand3 <- cbind.data.frame(rep(3,times=length(cand3)), names(cand3), unname(cand3))

colnames(cand1) <- colnames(cand2) <- colnames(cand3) <- c("axis","snp","loading")

cand <- rbind(cand1, cand2, cand3)
cand$snp <- as.character(cand$snp)

#Get associations between SNP and predictor:
#Let’s add in the correlations of each candidate SNP with the eight environmental predictors:

foo <- matrix(nrow=(ncand), ncol=6)  # 6 columns for 6 predictors
colnames(foo) <- c("bio2", "bio8", "bio10",
                "bio11", "bio13", "bio15")

for (i in 1:length(cand$snp)) {
  nam <- cand[i,2]
  snp.gen <- freq[,nam]
  foo[i,] <- apply(bioclim,2,function(x) cor(x,snp.gen))
}

cand <- cbind.data.frame(cand,foo)  
head(cand)

#Investigate the candidates
length(cand$snp[duplicated(cand$snp)])  # 61 duplicate detections
foo <- cbind(cand$axis, duplicated(cand$snp)) 
table(foo[foo[,1]==1,2]) # no duplicates on axis 1

table(foo[foo[,1]==2,2]) #  12  duplicates on axis 2

table(foo[foo[,1]==3,2]) # 49 duplicates on axis 3

#We’ve now reduced our candidates to 2620 unique SNPs.
cand <- cand[!duplicated(cand$snp),] # remove duplicate detections

#Next, we’ll see which of the predictors each candidate SNP is most strongly correlated with:
#Make sure numbers in brackets (columns) represent Number of bio variables
for (i in 1:length(cand$snp)) {
  bar <- cand[i,]
  cand[i,10] <- names(which.max(abs(bar[4:9]))) # gives the variable
  cand[i,11] <- max(abs(bar[4:9]))              # gives the correlation
}

colnames(cand)[10] <- "predictor"
colnames(cand)[11] <- "correlation"

#Check number of snps associated iwth each vairable --
#Note large number of bio2 and bio10
table(cand$predictor) 

#Save candidate snp results
write.table(cand, "RDA/CandidateSNP_correlations_RDA.txt", quote = F, row.names = F, col.names = T, sep="\t")
write.table(as.data.frame(cand$snp), "RDA/CandidateSNP_correlations_RDA_ListOnly.txt", quote = F, row.names = F, col.names = F, sep="\t")

### For plotting manhattan plots
#Get SNP info from bim file
snp_info=read.table("Combined_CAN_goodSNPs_allruns_badindremove_94K_updateIDs2_final_3838ind_maf005_recode.bim", header=F)

#Merge SNP loadings and snp info
results<-as.data.frame(load.rda)
results$SNPs<-rownames(load.rda)
results_info=merge(x=snp_info, by.x=2, y=results, by.y=4)

##Manhattan plots -- candidate loci 
head(results_info)
colnames(results_info)=c("SNP", "Chr", "V", "Pos", 
                         "A1", "A2", "RDA1", "RDA2", "RDA3")

#Candidate 1 (RDA1)
cand1_info=merge(x=cand1, by.x=2, y=results_info, by.y=1)
table(cand1_info$Chr)
results_info$abs_RDA1=abs(results_info$RDA1)

#Manhattan RDA1
manhattan(x=results_info[!is.na(results_info$Chr),], highlight = cand1$snp,
          ylab="RDA1", 
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA1", logp = F, ylim=c(-0.2, 0.2))
#Chr 1 is important
barplot(table(cand1_info$Chr))
manhattan(x=results_info[which(results_info$Chr==1),], highlight = cand1$snp,
          ylab="RDA1", 
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA1", logp = F, ylim=c(-0.2, 0.2))


#RDA2
cand2_info=merge(x=cand2, by.x=2, y=results_info, by.y=1)
barplot(table(cand2_info$Chr))
cand2_info[which(cand2_info$Chr==18),]
cand2_info[which.min(cand2_info$RDA2),]
cand2_info[which.max(cand2_info$RDA2),]

#Manhattan for RDA2
manhattan(x=results_info[!is.na(results_info$Chr),], highlight = cand2$snp,ylab="RDA2",
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA2", logp = F, ylim=c(-0.2, 0.2))

#Chromosomes 18 is important on RDA2
manhattan(x=results_info[which(results_info$Chr==18),], highlight = cand2$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA2", logp = F, ylim=c(-0.2, 0.2))

#RDA3 results
cand3_info=merge(x=cand3, by.x=2, y=results_info, by.y=1)
barplot(table(cand3_info$Chr))
cand3_info[which.min(cand3_info$RDA3),]

#Manhattan for RDA3
manhattan(x=results_info[!is.na(results_info$Chr),], highlight = cand3$snp,ylab="RDA3",
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))

#Chromosomes 1/23 are important on RDA3
manhattan(x=results_info[which(results_info$Chr==1),], highlight = cand3$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))
manhattan(x=results_info[which(results_info$Chr==23),], highlight = cand3$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))


##############


#Plotting RDA results with colouring SNPs by the variable they are associated with:
sel <- cand$snp
env <- cand$predictor

env[env=="bio2"] <- '#1f78b4'
env[env=="bio8"] <- '#a6cee3'
env[env=="bio10"] <- '#6a3d9a'
env[env=="bio11"] <- '#e31a1c'
env[env=="bio13"] <- '#33a02c'
env[env=="bio15"] <- '#ffff33'

# color by predictor:
col.pred <- rownames(salmon.rda$CCA$v) # pull the SNP names

for (i in 1:length(sel)) {           # color code candidate SNPs
  foo <- match(sel[i],col.pred)
  col.pred[foo] <- env[i]
}

col.pred[grep("AX-",col.pred)] <- '#f1eef6' # non-candidate SNPs
empty <- col.pred
empty[grep("#f1eef6",empty)] <- rgb(0,1,0, alpha=0) # transparent
empty.outline <- ifelse(empty=="#00FF0000","#00FF0000","gray32")
bg <- c('#1f78b4','#a6cee3','#6a3d9a','#e31a1c','#33a02c','#ffff33','#fb9a99','#b2df8a')



# axes 1 & 2
plot(salmon.rda, type="n", scaling=3, xlim=c(-1,1), ylim=c(-1,1))
points(salmon.rda, display="species", pch=21, cex=1, col="gray32", bg=col.pred, scaling=3)
points(salmon.rda, display="species", pch=21, cex=1, col=empty.outline, bg=empty, scaling=3)
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1)
legend("bottomright", legend=c("bio2", "bio8", "bio10",
                               "bio11", "bio13", "bio15"), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)

# axes 1 & 3
plot(salmon.rda, type="n", scaling=3, xlim=c(-1,1), ylim=c(-1,1), choices=c(1,3))
points(salmon.rda, display="species", pch=21, cex=1, col="gray32", bg=col.pred, scaling=3,choices=c(1,3))
points(salmon.rda, display="species", pch=21, cex=1, col=empty.outline, bg=empty, scaling=3,choices=c(1,3))
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1,choices=c(1,3))
legend("bottomright", legend=c("bio2", "bio8", "bio10",
                               "bio11", "bio13", "bio15"), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)

#Check out max correaltions for each variable
cand[which.max(abs(cand$bio2)),]
cand[which.max(abs(cand$bio8)),]
cand[which.max(abs(cand$bio10)),] #highest correlation = 0.86
cand[which.max(abs(cand$bio11)),] #highest correlation = 0.907
cand[which.max(abs(cand$bio13)),]
cand[which.max(abs(cand$bio15)),]


cand[which.max(cand$correlation),]
cand[which.min(cand$correlation),]

cand[order(cand$correlation, decreasing = T),][1:10,]

#Look at correlations for top SNPs

snp_info[which(snp_info$V2=="AX-87606447"),] #Chr5
#Gene pon2 --  Serum paraoxonase/arylesterase 2
plot(new_enviro$`AX-87606447`~new_enviro$bio11, 
     pch=19, xlab="Mean Temperature of Coldest Quarter", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87606447)")
text(new_enviro$`AX-87606447`+0.01~new_enviro$bio11, 
     label=new_enviro$Code, col="red")


snp_info[which(snp_info$V2=="AX-87846677"),] #Chr 11
#Gene zinc finger protein 507-like
plot(new_enviro$`AX-87846677`~new_enviro$bio10, pch=19, xlab="bio10", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87846677)")
text(y=new_enviro$`AX-87846677`+0.01, x=new_enviro$bio10,label=new_enviro$Code )

#Merge outlier snps with genome position information
compare_important_loci=merge(x=cand, by.x=2,y=snp_info, by.y=2)
compare_important_loci$Chrom=as.numeric(as.character(compare_important_loci$V1))
barplot(table(compare_important_loci$Chrom))

#Remove loci that are in translocation??? A large number!!!!! - keep for now... 
ssa01_23<- compare_important_loci[which(compare_important_loci$Chrom==1 & 
                               compare_important_loci$V4>= 44e6  &  compare_important_loci$V4 <= 53e6 |
                               compare_important_loci$Chrom==23 & 
                               compare_important_loci$V4>= 0 &  compare_important_loci$V4 <= 8e6 
                               ),]
ssa01_23[order(ssa01_23$correlation, decreasing = T),]
plot(new_enviro$`AX-87852082`~new_enviro$bio11, pch=19, xlab="bio11", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87852082)")
text(y=new_enviro$`AX-87852082`+0.01, x=new_enviro$bio11,label=new_enviro$Code )

#Gene  Mitogen-activated protein kinase 3 
plot(new_enviro$`AX-87421127`~new_enviro$bio2, pch=19, xlab="bio2", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87421127)")
text(y=new_enviro$`AX-87421127`+0.01, x=new_enviro$bio2,label=new_enviro$Code )

plot(new_enviro$`AX-87761720`~new_enviro$bio2, pch=19, xlab="bio2", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87761720)")
text(y=new_enviro$`AX-87761720`+0.01, x=new_enviro$bio2,label=new_enviro$Code )

