#Script for RDA to identify potential environmental outliers in salmon pops
#Script modified from Brenna Forester's vignette: https://popgen.nescent.org/2018-03-27_RDA_GEA.html
library(vegan)
library(data.table)
library(RColorBrewer)

setwd("~/Dropbox/Desktop/postdocwork/Salmon/GenomicVulnerability/Salmon_vulnerability/")

#Read in allele frequencies merged with environmental data (only kept uncorrelated environmental variables)
new_enviro=fread("AlleleFreq_EnviroData_95K_CORRECTED.txt", header=T)
new_enviro[1:10, 1:10]
new_enviro=as.data.frame(new_enviro)

#Revise columns names as needed
colnames(new_enviro)<-c("Code", "bio3_IsoT", "bio8_TempWet", "bio10_TempWarm",
                              "bio15_PrecSeasonal", "bio18_PrecWarm", "bio19_PrecCold",
                              colnames(new_enviro[,8:ncol(new_enviro)]))
colnames(new_enviro[,1:7])

#Add pop names as row names
rownames(new_enviro)=new_enviro$Code

#Create environmental only dataframe 
bioclim=new_enviro[,2:7]

#Create allele frequency dataframe 
freq=new_enviro[,c(8:ncol(new_enviro))]

#Check NAs (should be none for frequencies)
sum(is.na(freq))

#Run RDA with allele frequencies as response and bioclim/enviro data as predictors
#Can take a while depending on computer
salmon.rda=rda(freq~ ., data=bioclim)

#Save R data
save.image("SalmonRDA_results.RData")

#Load later
#load("SalmonRDA_results.RData")

#Quick plotting of RDA results
plot(salmon.rda, scaling=3)          # default is axes 1 and 2
plot(salmon.rda, choices = c(1, 3), scaling=3)  # axes 1 and 3


#Create region for colours in plot
pop_info=new_enviro[,1:8]
pop_info$Region=c("QC", "NL", "NL", "NL" ,"NL", "NL", "NB", "LAB",  "NL", "NS", "LAB" , "NL", "NL" ,"LAB",  "NL", "NL", "NL",
"LAB",  "NL", "NL", "LAB",  "NS", "NL", "NL", "NL", "LAB",  "NS", "LAB",  "NB", "NB", "NS", "NL", "NL", "NL",
 "LAB",  "NL", "NL", "NS", "NB", "LAB" , "NS", "PEI", "NS", "NB", "LAB",  "NB", 
"NL", "PEI","PEI", "Maine", "NL",
 "NL", "NL", "NL", "NS", "NB", "PEI", "LAB",  "NB", "NL", "NL", "NS", "LAB",  "NL", "NL", "NB", "NS", "NL",
 "LAB" , "PEI", "LAB" , "NL", "NL", "Maine", "LAB",  "NL", "LAB",  "NS", "NL", "NL", "LAB" , "QC", "NB", "NL")

table(pop_info$Region)

#Plotting RDA results (similar to Brenna Forrester script)
levels(pop_info$Region) <- c("Maine", "NB", "NS", "PEI", "NL", "QC", "LAB")
eco <- as.factor(pop_info$Region)
bg <- c("#ff7f00","#1f78b4","#ffff33","darkorchid1","#33a02c","#e31a1c", "black") # 7 nice colors for our regions
bg[eco]

# axes 1 & 2
plot(salmon.rda, type="n", scaling=3)
points(salmon.rda, display="species", pch=20, cex=0.7, col="gray32", scaling=3)           # the SNPs
points(salmon.rda, display="sites", pch=21, cex=1.3, col="gray32", scaling=3, bg=bg[eco]) # the salmo pops
text(salmon.rda, scaling=3, display="bp", col="firebrick1", cex=1)                           # the predictors
legend("bottomright", legend=levels(eco), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)

#Axes 1 and 3
plot(salmon.rda, type="n", scaling=3,  choices = c(1, 3))
points(salmon.rda, display="species", pch=20, cex=0.7, col="gray32", scaling=3, choices = c(1, 3))           # the SNPs
points(salmon.rda, display="sites", pch=21, cex=1.3, col="gray32", scaling=3, bg=bg[eco], choices = c(1, 3)) # the salmo pops
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1, choices = c(1, 3))                           # the predictors
legend("bottomright", legend=levels(eco), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)


#Get outliers -- may want to use 2-3 RDA axes -- depending on how environmental variables are loading...
load.rda <- scores(salmon.rda, choices=c(1:3), display="species")  # SNP scores for the first three constrained axes
hist(load.rda[,1], main="Loadings on RDA1")
hist(load.rda[,2], main="Loadings on RDA2")
hist(load.rda[,3], main="Loadings on RDA3") 

#Outlier function to find SNPs n standard deviations from the mean
outliers <- function(x,z){
  lims <- mean(x) + c(-1, 1) * z * sd(x)     # find loadings +/-z sd from mean loading     
  x[x < lims[1] | x > lims[2]]               # locus names in these tails
}

#outlier loci 3 sd from mean on RDA1
cand1 <- outliers(load.rda[,1],3) # 905 outliers
str(cand1)

#outlier loci 3 sd from mean on RDA2
cand2 <- outliers(load.rda[,2],3) # 784 outliers
str(cand2)

#outlier loci 3 sd from mean on RDA3
cand3 <- outliers(load.rda[,3],3) # 939 outliers
str(cand3)

#Get all candidate snps
ncand <- length(cand1) + length(cand2) + length(cand3)
ncand

cand1 <- cbind.data.frame(rep(1,times=length(cand1)), names(cand1), unname(cand1))
cand2 <- cbind.data.frame(rep(2,times=length(cand2)), names(cand2), unname(cand2))
cand3 <- cbind.data.frame(rep(3,times=length(cand3)), names(cand3), unname(cand3))

colnames(cand1) <- colnames(cand2) <- colnames(cand3) <- c("axis","snp","loading")

cand <- rbind(cand1, cand2, cand3)
cand$snp <- as.character(cand$snp)

#Get SNP info from bim file
snp_info=read.table("CorrectIDs_140Pops_badsamples_plustroutremoved_220K_4locremoved_3545ind.bim", header=F)

head(load.rda)
results<-as.data.frame(load.rda)
results
results$SNPs<-rownames(load.rda)

results_info=merge(x=snp_info, by.x=2, y=results, by.y=4)

library(qqman)
head(results_info)
colnames(results_info)=c("SNP", "Chr", "V", "Pos", 
                         "A1", "A2", "RDA1", "RDA2", "RDA3")

cand1_info=merge(x=cand1, by.x=2, y=results_info, by.y=1)
table(cand1_info$Chr)


results_info$abs_RDA1=abs(results_info$RDA1)

#Select top 95% snps?
#See function edits at bottom of script
manhattan1(x=results_info[!is.na(results_info$Chr),], highlight1 = cand1$snp,ylab="RDA1", 
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA1", logp = F, ylim=c(-0.2, 0.2))

barplot(table(cand1_info$Chr))
cand1_info[which(cand1_info$Chr==18),]
manhattan(x=results_info[which(results_info$Chr==18),], highlight = cand1$snp, 
          chr="Chr", bp="Pos", snp="SNP", p = "RDA1", logp = F, ylim=c(-0.2, 0.2))
cand1_info[which.min(cand1_info$RDA1),]
cand1_info[which.max(cand1_info$RDA1),]


cand2_info=merge(x=cand2, by.x=2, y=results_info, by.y=1)
barplot(table(cand2_info$Chr))
cand2_info[which(cand2_info$Chr==18),]
cand2_info[which.min(cand2_info$RDA2),]
cand2_info[which.max(cand2_info$RDA2),]

manhattan1(x=results_info[!is.na(results_info$Chr),], highlight1 = cand2$snp,ylab="RDA2",
           col = c("dodgerblue4", "black"),
            chr="Chr", bp="Pos", snp="SNP", p = "RDA2", logp = F, ylim=c(-0.2, 0.2))
manhattan(x=results_info[which(results_info$Chr==18),], highlight = cand2$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA2", logp = F, ylim=c(-0.2, 0.2))


cand3_info=merge(x=cand3, by.x=2, y=results_info, by.y=1)
barplot(table(cand3_info$Chr))
cand3_info[which.min(cand3_info$RDA3),]

manhattan1(x=results_info[!is.na(results_info$Chr),], highlight1 = cand3$snp,ylab="RDA3",
          col = c("dodgerblue4", "black"),
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))

manhattan(x=results_info[which(results_info$Chr==1),], highlight = cand3$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))
manhattan(x=results_info[which(results_info$Chr==23),], highlight = cand3$snp,
          chr="Chr", bp="Pos", snp="SNP", p = "RDA3", logp = F, ylim=c(-0.11, 0.11))





cand <- rbind(cand1, cand2, cand3)
cand$snp <- as.character(cand$snp)


foo <- matrix(nrow=(ncand), ncol=6)  # 8 columns for 8 predictors
colnames(foo) <- c("bio3_IsoT", "bio8_TempWet", "bio10_TempWarm",
                   "bio15_PrecSeasonal", "bio18_PrecWarm", "bio19_PrecCold")

for (i in 1:length(cand$snp)) {
  nam <- cand[i,2]
  snp.gen <- freq[,nam]
  foo[i,] <- apply(bioclim,2,function(x) cor(x,snp.gen))
}

cand <- cbind.data.frame(cand,foo)  
head(cand)

length(cand$snp[duplicated(cand$snp)])  # 7 duplicate detections
foo <- cbind(cand$axis, duplicated(cand$snp)) 
table(foo[foo[,1]==1,2]) # no duplicates on axis 1

table(foo[foo[,1]==2,2]) #  79 duplicates on axis 2

table(foo[foo[,1]==3,2]) # 45 duplicates on axis 3

cand <- cand[!duplicated(cand$snp),] # remove duplicate detections

for (i in 1:length(cand$snp)) {
  bar <- cand[i,]
  cand[i,10] <- names(which.max(abs(bar[4:9]))) # gives the variable
  cand[i,11] <- max(abs(bar[4:9]))              # gives the correlation
}

colnames(cand)[10] <- "predictor"
colnames(cand)[11] <- "correlation"

table(cand$predictor) 
write.table(cand, "CandidateSNP_correlations_RDA.txt", quote = F, row.names = F, col.names = T, sep="\t")
write.table(as.data.frame(cand$snp), "CandidateSNP_correlations_RDA_ListOnly.txt", quote = F, row.names = F, col.names = F, sep="\t")


nrow(cand)

sel <- cand$snp
env <- cand$predictor

env[env=="bio3_IsoT"] <- '#1f78b4'
env[env=="bio8_TempWet"] <- '#a6cee3'
env[env=="bio10_TempWarm"] <- '#6a3d9a'
env[env=="bio15_PrecSeasonal"] <- '#e31a1c'
env[env=="bio18_PrecWarm"] <- '#33a02c'
env[env=="bio19_PrecCold"] <- '#ffff33'

# color by predictor:
col.pred <- rownames(salmon.rda$CCA$v) # pull the SNP names

for (i in 1:length(sel)) {           # color code candidate SNPs
  foo <- match(sel[i],col.pred)
  col.pred[foo] <- env[i]
}

col.pred[grep("AX-",col.pred)] <- '#f1eef6' # non-candidate SNPs
empty <- col.pred
empty[grep("#f1eef6",empty)] <- rgb(0,1,0, alpha=0) # transparent
empty.outline <- ifelse(empty=="#00FF0000","#00FF0000","gray32")
bg <- c('#1f78b4','#a6cee3','#6a3d9a','#e31a1c','#33a02c','#ffff33','#fb9a99','#b2df8a')






# axes 1 & 2
plot(salmon.rda, type="n", scaling=3, xlim=c(-1,1), ylim=c(-1,1))
points(salmon.rda, display="species", pch=21, cex=1, col="gray32", bg=col.pred, scaling=3)
points(salmon.rda, display="species", pch=21, cex=1, col=empty.outline, bg=empty, scaling=3)
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1)
legend("bottomright", legend=c("bio3_IsoT", "bio8_TempWet", "bio10_TempWarm",
                               "bio15_PrecSeasonal", "bio18_PrecWarm", "bio19_PrecCold"), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)

# axes 1 & 3
plot(salmon.rda, type="n", scaling=3, xlim=c(-1,1), ylim=c(-1,1), choices=c(1,3))
points(salmon.rda, display="species", pch=21, cex=1, col="gray32", bg=col.pred, scaling=3,choices=c(1,3))
points(salmon.rda, display="species", pch=21, cex=1, col=empty.outline, bg=empty, scaling=3,choices=c(1,3))
text(salmon.rda, scaling=3, display="bp", col="#0868ac", cex=1,choices=c(1,3))
legend("bottomright", legend=c("bio3_IsoT", "bio8_TempWet", "bio10_TempWarm",
                               "bio15_PrecSeasonal", "bio18_PrecWarm", "bio19_PrecCold"), bty="n", col="gray32", pch=21, cex=1, pt.bg=bg)




cand[which.max(cand$bio3_IsoT),]
cand[which.max(cand$bio8_TempWet),]

cand[which.max(cand$bio10_TempWarm),]
cand[which.max(cand$bio15_PrecSeasonal),]
cand[which.max(cand$bio18_PrecWarm),]
cand[which.max(cand$bio19_PrecCold),]

cand[which.min(cand$bio3_IsoT),]
cand[which.min(cand$bio8_TempWet),]
cand[which.min(cand$bio10_TempWarm),]
cand[which.min(cand$bio15_PrecSeasonal),]
cand[which.min(cand$bio18_PrecWarm),]
cand[which.min(cand$bio19_PrecCold),]

cand[which.max(cand$correlation),]
cand[which.min(cand$correlation),]

cand[order(cand$correlation, decreasing = T),][1:10,]

AX-87354752

plot(new_enviro$`AX-87670648`~new_enviro$bio8_TempWet, pch=19, xlab="Mean temperature in warmest quarter - Bio10 (scaled)", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87670648)")

plot(new_enviro$`AX-87044281`~new_enviro$bio18_PrecWarm, pch=19, xlab="Mean temperature in warmest quarter - Bio10 (scaled)", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87044281)")
text(y=new_enviro$`AX-87044281`+0.01, x=new_enviro$bio18_PrecWarm,label=new_enviro$Code )

plot(new_enviro$`AX-87354752`~new_enviro$bio10_TempWarm, pch=19, xlab="Mean temperature in warmest quarter - Bio10 (scaled)", cex=1.4,
     las=1, ylab="SNP Allele Frequency (AX-87354752)")

Top_Allele_assocaition=as.data.frame(cbind(new_enviro$Code, new_enviro$`AX-87354752`, new_enviro$bio10_TempWarm))
write.table(Top_Allele_assocaition, "~/Dropbox/Desktop/postdocwork/Salmon/GenomicVulnerability/Salmon_vulnerability/SNP_freq_topenviro_outlier_AX-87354752.txt", quote = F, row.names = F, col.names = T, sep="\t")

plot(new_enviro$`AX-87846677`~new_enviro$bio10_TempWarm)
plot(new_enviro$`AX-87606447`~new_enviro$bio19_PrecCold)
plot(new_enviro$`AX-87606447`~new_enviro$bio10_TempWarm)


snp_info[which(snp_info$V2=="AX-87354752"),]
snp_info[which(snp_info$V2=="AX-87846677"),]
snp_info[which(snp_info$V2=="AX-87606447"),]



compare_important_loci=merge(x=cand, by.x=2,y=snp_info, by.y=2)
compare_important_loci$Chrom=as.numeric(as.character(compare_important_loci$V1))
barplot(table(compare_important_loci$Chrom))

#Remove loci that are in translocation??? A large number!!!!!

loci_to_remove=(compare_important_loci[which(compare_important_loci$Chrom==1 & 
                               compare_important_loci$V4>= 44e6  &  compare_important_loci$V4<= 53e6 |
                               compare_important_loci$Chrom==23 & 
                               compare_important_loci$V4>=0 &  compare_important_loci$V4<=8e6 
                               ),])

nrow(compare_important_loci)

342/ 2504


Loci_no_translocation=compare_important_loci[!(compare_important_loci$snp %in% loci_to_remove$snp),]
write.table(Loci_no_translocation, "Candidate_SNPs/CandidateSNPs_NoTranslocation.txt", quote = F, row.names = F, col.names = T, sep="\t")
write.table(Loci_no_translocation$snp, "Candidate_SNPs/CandidateSNPs_NoTranslocation_LIST.txt", quote = F, row.names = F, col.names = F, sep="\t")



#Function manhattan
manhattan1<-function (x, chr = "CHR", bp = "BP", p = "P", snp = "SNP", col = c("gray10",
                                                                               "gray60"), chrlabs = NULL, suggestiveline = -log10(1e-05),
                      genomewideline = -log10(5e-08), highlight1 = NULL, highlight2 = NULL, logp = TRUE,
                      ...)
{
  CHR = BP = P = index = NULL
  if (!(chr %in% names(x)))
    stop(paste("Column", chr, "not found!"))
  if (!(bp %in% names(x)))
    stop(paste("Column", bp, "not found!"))
  if (!(p %in% names(x)))
    stop(paste("Column", p, "not found!"))
  if (!(snp %in% names(x)))
    warning(paste("No SNP column found. OK unless you're trying to highlight."))
  if (!is.numeric(x[[chr]]))
    stop(paste(chr, "column should be numeric. Do you have 'X', 'Y', 'MT', etc? If so change to numbers and try again."))
  if (!is.numeric(x[[bp]]))
    stop(paste(bp, "column should be numeric."))
  if (!is.numeric(x[[p]]))
    stop(paste(p, "column should be numeric."))
  d = data.frame(CHR = x[[chr]], BP = x[[bp]], P = x[[p]])
  if (!is.null(x[[snp]]))
    d = transform(d, SNP = x[[snp]])
  d <- subset(d, (is.numeric(CHR) & is.numeric(BP) & is.numeric(P)))
  d <- d[order(d$CHR, d$BP), ]
  if (logp) {
    d$logp <- -log10(d$P)
  }
  else {
    d$logp <- d$P
  }
  d$pos = NA
  d$index = NA
  ind = 0
  for (i in unique(d$CHR)) {
    ind = ind + 1
    d[d$CHR == i, ]$index = ind
  }
  nchr = length(unique(d$CHR))
  if (nchr == 1) {
    options(scipen = 999)
    d$pos = d$BP/1e+06
    ticks = floor(length(d$pos))/2 + 1
    xlabel = paste("Chromosome", unique(d$CHR), "position(Mb)")
    labs = ticks
  }
  else {
    lastbase = 0
    ticks = NULL
    for (i in unique(d$index)) {
      if (i == 1) {
        d[d$index == i, ]$pos = d[d$index == i, ]$BP
      }
      else {
        lastbase = lastbase + tail(subset(d, index ==
                                            i - 1)$BP, 1)
        d[d$index == i, ]$pos = d[d$index == i, ]$BP +
          lastbase
      }
      ticks = c(ticks, (min(d[d$CHR == i, ]$pos) + max(d[d$CHR ==
                                                           i, ]$pos))/2 + 1)
    }
    xlabel = "Chromosome"
    labs <- unique(d$CHR)
  }
  xmax = ceiling(max(d$pos) * 1.03)
  xmin = floor(max(d$pos) * -0.03)
  def_args <- list(xaxt = "n", bty = "n", xaxs = "i", yaxs = "i",
                   las = 1, pch = 20, xlim = c(xmin, xmax), ylim = c(0,
                                                                     ceiling(max(d$logp))), xlab = xlabel, ylab = expression(-log10))
  dotargs <- list(...)
  do.call("plot", c(NA, dotargs, def_args[!names(def_args) %in%
                                            names(dotargs)]))
  if (!is.null(chrlabs)) {
    if (is.character(chrlabs)) {
      if (length(chrlabs) == length(labs)) {
        labs <- chrlabs
      }
      else {
        warning("You're trying to specify chromosome labels but the number of labels != number of chromosomes.")
      }
    }
    else {
      warning("If you're trying to specify chromosome labels, chrlabs must be a character vector")
    }
  }
  if (nchr == 1) {
    axis(1, ...)
  }
  else {
    axis(1, at = ticks, labels = labs, ...)
  }
  col = rep(col, max(d$CHR))
  if (nchr == 1) {
    with(d, points(pos, logp, pch = 20, col = col[1], ...))
  }
  else {
    icol = 1
    for (i in unique(d$index)) {
      with(d[d$index == unique(d$index)[i], ], points(pos,
                                                      logp, col = col[icol], pch = 20, ...))
      icol = icol + 1
    }
  }
  if (suggestiveline)
    abline(h = suggestiveline, col = "blue")
  if (genomewideline)
    abline(h = genomewideline, col = "red")
  if (!is.null(highlight1)) {
    if (any(!(highlight1 %in% d$SNP)))
      warning("You're trying to highlight1 SNPs that don't exist in your results.")
    d.highlight1 = d[which(d$SNP %in% highlight1), ]
    with(d.highlight1, points(pos, logp, col = "firebrick2", pch = 20,
                              ...))
  }
  if (!is.null(highlight2)) {
    if (any(!(highlight2 %in% d$SNP)))
      warning("You're trying to highlight2 SNPs that don't exist in your results.")
    d.highlight2 = d[which(d$SNP %in% highlight2), ]
    with(d.highlight2, points(pos, logp, col = "dodgerblue", pch = 20,
                              ...))
  }
}
